import axios from 'axios';
import { Linking } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Cookies } from '@react-native-cookies/cookies';

const API_URL = 'http://10.0.2.2:5000/api/auth';

export const refreshToken = async () => {
    try {
        // L·∫•y cookie hi·ªán t·∫°i (v√≠ d·ª• backend set cookie t√™n l√† 'refreshToken')
        const cookies = await Cookies.get('http://10.0.2.2:5000');
        // T·∫°o header Cookie d·∫°ng: "refreshToken=abc123; otherCookie=xyz"
        const cookieHeader = Object.entries(cookies)
            .map(([key, c]) => `${key}=${c.value}`)
            .join('; ');

        const response = await axios.post(`${API_URL}/refresh-token`, null, {
            headers: {
                Cookie: cookieHeader,
            },
            // N·∫øu backend c·∫ßn withCredentials, b·∫°n c√≥ th·ªÉ th√™m (kh√¥ng ch·∫Øc React Native h·ªó tr·ª£ 100%)
            // withCredentials: true,
        });

        const { accessToken } = response.data;
        await AsyncStorage.setItem('token', accessToken);
        return accessToken;
    } catch (error) {
        console.log("üî¥ Refresh token th·∫•t b·∫°i:", error.response?.data || error);
        throw new Error("Kh√¥ng th·ªÉ l√†m m·ªõi token");
    }
};

export const getMe = async () => {
    const token = await AsyncStorage.getItem('token');
    console.log("üìå Token hi·ªán t·∫°i:", token);

    if (!token) return null;

    try {
        const response = await axios.get(`${API_URL}/me`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        console.log("‚úÖ getMe() th√†nh c√¥ng:", response.data);
        return response.data.data;
    } catch (error) {
        const err = new Error(error.response?.data?.message || 'Failed to fetch user data');
        err.status = error.response?.status;
        throw err;
    }
};

export const register = async (name, email, password) => {
    try {
        console.log("üì§ Sending request to:", `${API_URL}/register`);
        console.log("üì¶ Data:", { name, email, password });

        const response = await axios.post(`${API_URL}/register`, { name, email, password });

        console.log("‚úÖ Response:", response.data);
        return response.data;
    } catch (error) {
        console.log("‚ùå Error Response:", error.response?.data || error);

        if (error.response && error.response.status === 400) {
            throw new Error(error.response.data.message || "L·ªói t·ª´ m√°y ch·ªß!");
        }

        throw new Error("ƒêƒÉng k√Ω th·∫•t b·∫°i, th·ª≠ l·∫°i sau!");
    }
};

export const logout = async () => {
    try {
        const token = await AsyncStorage.getItem("token");
        if (!token) {
            console.log("üö´ Kh√¥ng c√≥ token ƒë·ªÉ ƒëƒÉng xu·∫•t");
            return { success: false, message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p" };
        }

        const response = await axios.get(`${API_URL}/logout`, {
            headers: { Authorization: `Bearer ${token}` }
        });

        return response.data;
    } catch (error) {
        console.log("‚ùå L·ªói API logout:", error.response?.data || error);
        return error.response?.data || { success: false, message: "L·ªói ƒëƒÉng xu·∫•t" };
    }
};

export const login = async (email, password) => {
    try {
        const response = await axios.post(`${API_URL}/login`, { email, password });
        console.log("üî• D·ªØ li·ªáu API tr·∫£ v·ªÅ:", response.data);
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "L·ªói k·∫øt n·ªëi m√°y ch·ªß";
    }
};

export const loginWithGoogle = async () => {
    try {
        const authUrl = `${API_URL}/google`;
        Linking.openURL(authUrl);
    } catch (error) {
        console.log("üî¥ L·ªói Google Login:", error);
        throw "ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i";
    }
};

export const loginWithFacebook = async () => {
    try {
        const response = await axios.get(`${API_URL}/facebook`);
        return response.data;
    } catch (error) {
        throw error.response?.data || "ƒêƒÉng nh·∫≠p Facebook th·∫•t b·∫°i";
    }
};

export const sendOTP = async (email) => {
    try {
        const response = await axios.post(`${API_URL}/password/forgot`, { email });
        return response.data;
    } catch (error) {
        throw error.response?.data || "L·ªói khi g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u";
    }
};

export const verifyOTP = async (email, otp) => {
    try {
        const response = await axios.post(`${API_URL}/password/verify-otp`, { email, otp });
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "L·ªói x√°c th·ª±c OTP";
    }
};

export const resetPassword = async (email, otp, newPassword) => {
    try {
        const response = await axios.post(`${API_URL}/password/reset`, { email, otp, password: newPassword });
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u";
    }
};

axios.interceptors.response.use(
    res => res,
    async error => {
        const originalRequest = error.config;

        if (
            error.response?.status === 401 &&
            !originalRequest._retry &&
            !originalRequest.url.includes('/login')
        ) {
            originalRequest._retry = true;
            try {
                const newAccessToken = await refreshToken();
                axios.defaults.headers.common['Authorization'] = `Bearer ${newAccessToken}`;
                originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;
                return axios(originalRequest);
            } catch (refreshError) {
                console.log("‚ö†Ô∏è Refresh token kh√¥ng th√†nh c√¥ng");
                await AsyncStorage.removeItem('token');
                await AsyncStorage.removeItem('user');
            }
        }

        return Promise.reject(error);
    }
);
